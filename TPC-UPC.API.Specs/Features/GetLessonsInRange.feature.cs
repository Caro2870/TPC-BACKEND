// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TPC_UPC.API.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("GetLessonsInRange", Description="\tSimple test for getting some lessons according to some params", SourceFile="Features\\GetLessonsInRange.feature", SourceLine=0)]
    public partial class GetLessonsInRangeFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "GetLessonsInRange.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "GetLessonsInRange", "\tSimple test for getting some lessons according to some params", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void TutorGetsAListOfLessonsAccordingToARangeOfDates(string lessonId, string scheduleId, string description, string tutorId, string lessonTypeId, string courseId, string start, string end, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("LessonId", lessonId);
            argumentsOfScenario.Add("ScheduleId", scheduleId);
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("TutorId", tutorId);
            argumentsOfScenario.Add("LessonTypeId", lessonTypeId);
            argumentsOfScenario.Add("CourseId", courseId);
            argumentsOfScenario.Add("start", start);
            argumentsOfScenario.Add("end", end);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tutor gets a list of lessons according to a range of dates", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given(string.Format("the tutor wants to list lessons according to a range of dates ({0}, {1}, {2}, {3}" +
                            ", {4}, {5})", lessonId, scheduleId, description, tutorId, lessonTypeId, courseId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("the tutor enters the parans ({0}, {1})", start, end), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then("the result for this scenario should be the number of lessons in this range 3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Tutor gets a list of lessons according to a range of dates, 1", new string[] {
                "mytag"}, SourceLine=11)]
        public virtual void TutorGetsAListOfLessonsAccordingToARangeOfDates_1()
        {
#line 5
this.TutorGetsAListOfLessonsAccordingToARangeOfDates("1", "4", "1st Lesson", "1", "1", "1", "05/05/2021", "05/07/2021", ((string[])(null)));
#line hidden
        }
        
        public virtual void TutorDoenstGetAnyListOfLessonsAccordingToARangeOfDates(string lessonId, string scheduleId, string description, string tutorId, string lessonTypeId, string courseId, string start, string end, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("LessonId", lessonId);
            argumentsOfScenario.Add("ScheduleId", scheduleId);
            argumentsOfScenario.Add("Description", description);
            argumentsOfScenario.Add("TutorId", tutorId);
            argumentsOfScenario.Add("LessonTypeId", lessonTypeId);
            argumentsOfScenario.Add("CourseId", courseId);
            argumentsOfScenario.Add("start", start);
            argumentsOfScenario.Add("end", end);
            argumentsOfScenario.Add("message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Tutor doens\'t get any list of lessons according to a range of dates", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
 testRunner.Given(string.Format("the tutor wants to list lessons according to a range of dates ({0}, {1}, {2}, {3}" +
                            ", {4}, {5})", lessonId, scheduleId, description, tutorId, lessonTypeId, courseId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
 testRunner.When(string.Format("the tutor enters the parans ({0}, {1})", start, end), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.And(string.Format("any lesson is returned ({0}, {1})", start, end), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.Then(string.Format("the message that returns for this scenario should be {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Tutor doens\'t get any list of lessons according to a range of dates, 1", new string[] {
                "mytag"}, SourceLine=22)]
        public virtual void TutorDoenstGetAnyListOfLessonsAccordingToARangeOfDates_1()
        {
#line 15
this.TutorDoenstGetAnyListOfLessonsAccordingToARangeOfDates("1", "4", "1st Lesson", "1", "1", "1", "05/05/2021", "05/07/2021", "One or more errors occurred. (You don\'t have any lessons in this range)", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
