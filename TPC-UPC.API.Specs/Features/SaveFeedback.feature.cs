// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.8.0.0
//      SpecFlow Generator Version:3.8.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TPC_UPC.API.Specs.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.8.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("SaveFeedback", Description="\tSimple calculator for adding two numbers", SourceFile="Features\\SaveFeedback.feature", SourceLine=0)]
    public partial class SaveFeedbackFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SaveFeedback.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "SaveFeedback", "\tSimple calculator for adding two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void DoNotSelectNumberOfStars(string lessonId, string studentId, string sameLessonId, string sameStudentId, string qualification, string comment, string complaint, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("LessonId", lessonId);
            argumentsOfScenario.Add("StudentId", studentId);
            argumentsOfScenario.Add("SameLessonId", sameLessonId);
            argumentsOfScenario.Add("SameStudentId", sameStudentId);
            argumentsOfScenario.Add("Qualification", qualification);
            argumentsOfScenario.Add("Comment", comment);
            argumentsOfScenario.Add("Complaint", complaint);
            argumentsOfScenario.Add("response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Do not select number of stars", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
 testRunner.Given(string.Format("that the lesson has ended and the student must give a grade for that lesson({0}, " +
                            "{1})", lessonId, studentId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 7
 testRunner.When(string.Format("the student sends unmarked number of stars({0}, {1}, {2}, {3}, {4})", sameLessonId, sameStudentId, qualification, comment, complaint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then(string.Format("the message that returns should be{0}", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Do not select number of stars, 1", new string[] {
                "mytag"}, SourceLine=11)]
        public virtual void DoNotSelectNumberOfStars_1()
        {
#line 5
this.DoNotSelectNumberOfStars("1", "1", "1", "1", "0", "-", "false", "It’s necessary to assign number of starts", ((string[])(null)));
#line hidden
        }
        
        public virtual void RateTheTutorByStars(string lessonId, string studentId, string sameLessonId, string sameStudentId, string qualification, string comment, string complaint, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("LessonId", lessonId);
            argumentsOfScenario.Add("StudentId", studentId);
            argumentsOfScenario.Add("SameLessonId", sameLessonId);
            argumentsOfScenario.Add("SameStudentId", sameStudentId);
            argumentsOfScenario.Add("Qualification", qualification);
            argumentsOfScenario.Add("Comment", comment);
            argumentsOfScenario.Add("Complaint", complaint);
            argumentsOfScenario.Add("response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rate the tutor by stars", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 15
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 16
 testRunner.Given(string.Format("that the lesson has ended and the student must give a grade for that lesson({0}, " +
                            "{1})", lessonId, studentId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
 testRunner.When(string.Format("the student sends the number of stars({0}, {1}, {2}, {3}, {4})", sameLessonId, sameStudentId, qualification, comment, complaint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 18
 testRunner.Then(string.Format("the system should return{0}", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Rate the tutor by stars, 1", new string[] {
                "mytag"}, SourceLine=21)]
        public virtual void RateTheTutorByStars_1()
        {
#line 15
this.RateTheTutorByStars("1", "1", "1", "1", "1", "-", "false", "True", ((string[])(null)));
#line hidden
        }
        
        public virtual void SendACommentAboutTheLessonAttended(string lessonId, string studentId, string sameLessonId, string sameStudentId, string qualification, string comment, string complaint, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("LessonId", lessonId);
            argumentsOfScenario.Add("StudentId", studentId);
            argumentsOfScenario.Add("SameLessonId", sameLessonId);
            argumentsOfScenario.Add("SameStudentId", sameStudentId);
            argumentsOfScenario.Add("Qualification", qualification);
            argumentsOfScenario.Add("Comment", comment);
            argumentsOfScenario.Add("Complaint", complaint);
            argumentsOfScenario.Add("response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send a comment about the lesson attended", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
 testRunner.Given(string.Format("that the student wants to send a comment about the lesson attended({0}, {1})", lessonId, studentId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.When(string.Format("fills in the information he wants to leave as a comment({0}, {1}, {2}, {3}, {4})", sameLessonId, sameStudentId, qualification, comment, complaint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 28
 testRunner.Then(string.Format("the system should return{0}", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Send a comment about the lesson attended, 1", new string[] {
                "mytag"}, SourceLine=31)]
        public virtual void SendACommentAboutTheLessonAttended_1()
        {
#line 25
this.SendACommentAboutTheLessonAttended("1", "1", "1", "1", "1", "Good class!", "false", "True", ((string[])(null)));
#line hidden
        }
        
        public virtual void SendAComplaintAboutTheLessonAttended(string lessonId, string studentId, string sameLessonId, string sameStudentId, string qualification, string comment, string complaint, string response, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("LessonId", lessonId);
            argumentsOfScenario.Add("StudentId", studentId);
            argumentsOfScenario.Add("SameLessonId", sameLessonId);
            argumentsOfScenario.Add("SameStudentId", sameStudentId);
            argumentsOfScenario.Add("Qualification", qualification);
            argumentsOfScenario.Add("Comment", comment);
            argumentsOfScenario.Add("Complaint", complaint);
            argumentsOfScenario.Add("response", response);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Send a complaint about the lesson attended", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 36
 testRunner.Given(string.Format("that the student wants to send a complaint about the lesson attended({0}, {1})", lessonId, studentId), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
 testRunner.When(string.Format("fills in the information he wants to leave as a complaint and identifies it as a " +
                            "complaint({0}, {1}, {2}, {3}, {4})", sameLessonId, sameStudentId, qualification, comment, complaint), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
 testRunner.Then(string.Format("the system should return{0}", response), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Send a complaint about the lesson attended, 1", new string[] {
                "mytag"}, SourceLine=41)]
        public virtual void SendAComplaintAboutTheLessonAttended_1()
        {
#line 35
this.SendAComplaintAboutTheLessonAttended("1", "1", "1", "1", "1", "Bad class!", "true", "True", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
